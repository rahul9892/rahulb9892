package com.flipkart.reusableUtilities;

import java.io.FileInputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import com.flipkart.objectRepository.objectrepository;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

public class BaseTest  {

	public WebDriver driver = null;
	public Properties prop;
	public Xls_Reader xls;
	public static ExtentTest test;
	boolean gridRun = false;
	public static ExtentReports rep;
	public static String testCaseName;

	public void init() {

		System.out.println(driver);
		if (prop == null) {
			prop = new Properties();
			try {
				FileInputStream fs = new FileInputStream(
						System.getProperty("user.dir")
								+ "\\src\\main\\java\\com\\flipkart\\externalFiles\\projectconfig.properties");
			
				prop.load(fs);
				System.out.println(prop.getProperty("defaultUserName"));
				System.out.println("This is the AppURL-->"
						+ prop.getProperty("testAppURL"));
			} catch (Exception e) {
				e.printStackTrace();
			}
			System.out.println(System.getProperty("user.dir")
					+ "\\src\\test\\java\\resources\\projectconfig.properties");
		}
	}

	public void openBrowser(String bType) {
		if (!gridRun) {
			if (bType.equals("Chrome")) {
				System.setProperty("webdriver.chrome.driver",
						System.getProperty("user.dir")+"\\drivers\\chromedriver.exe");
				driver = new ChromeDriver();
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			} else if (bType.equals("firefox")) {
				System.setProperty("webDriver.gecko.driver",
						prop.getProperty("firefox_exe"));
				driver = new FirefoxDriver();
			}
			PageFactory.initElements(driver, objectrepository.class);
		} else {
			DesiredCapabilities cap = null;
			if (bType.equals("firefox")) {
				cap = DesiredCapabilities.firefox();
				cap.setBrowserName("firefox");
				cap.setJavascriptEnabled(true);
				cap.setPlatform(org.openqa.selenium.Platform.WINDOWS);
			} else if (bType.equals("chrome")) {
				cap = DesiredCapabilities.chrome();
				cap.setBrowserName("chrome");
				cap.setJavascriptEnabled(true);
				cap.setPlatform(org.openqa.selenium.Platform.WINDOWS);
			}

			try {
				driver = new RemoteWebDriver(new URL(
						"http://localhost:4444/wd/hub"), cap);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
		driver.manage().window().maximize();
	}
	
	public void sleep(int timeToWait) throws InterruptedException {
		Thread.sleep(timeToWait* 1000);

	}

	public void navigate(String appurl) {
		driver.navigate().to(appurl);
	}

	public void sendKeys(WebElement elem, String content) {
		System.out.println(elem.isDisplayed());
		elem.sendKeys(content);
	}

	public void click(WebElement locatorKey) {
		locatorKey.click();
	}

	public WebElement getElement(String locatorKey) {
		WebElement e = null;
		try {
			if (locatorKey.endsWith("_xpath")) {
				e = driver.findElement(By.xpath(prop.getProperty(locatorKey)));
			} else if (locatorKey.contains("id")) {
				e = driver.findElement(By.id(prop.getProperty(locatorKey)));
			} else if (locatorKey.endsWith("_name")) {
				e = driver.findElement(By.name(prop.getProperty(locatorKey)));
			} else if (locatorKey.endsWith("_css")) {
				e = driver.findElement(By.cssSelector(prop
						.getProperty(locatorKey)));

			} else {
				reportFailture("Locator NOT found/incorrect locator-->"
						+ locatorKey);
			}

		} catch (Exception ex) {
			ex.printStackTrace();
			reportFailture(ex.getMessage());
		}
		return e;

	}

	/* ************validations ****************** */

	public boolean verifyText(String locatorKey, String expectedtext) {
		String actualText = getElement(locatorKey).getText();
		if (actualText.trim().equals(prop.getProperty(expectedtext))) {
			Assert.assertTrue(true, "Correct String is Present");
			return true;
		} else {
			return false;
		}

	}

	public boolean isElementPresent(String locatorKey) {
		List<WebElement> list = null;
		WebElement e = null;
		if (locatorKey.endsWith("_xpath")) {
			list = driver.findElements(By.xpath(prop.getProperty(locatorKey)));
		} else if (locatorKey.endsWith("_id")) {
			list = driver.findElements(By.id(prop.getProperty(locatorKey)));
		} else if (locatorKey.endsWith("_name")) {
			list = driver.findElements(By.name(prop.getProperty(locatorKey)));
		} else if (locatorKey.endsWith("_css")) {
			list = driver.findElements(By.cssSelector(prop
					.getProperty(locatorKey)));
		} else {
			reportFailture("Locator NOT found/incorrect locator-->"
					+ locatorKey);
			Assert.fail("Locator Key is NOT found in Properties file-->"
					+ locatorKey);
		}
		if (list.size() == 0) {
			return false;
		} else {
			return true;
		}

	}

	/*
	 * public boolean verifytext(){ return false;
	 * 
	 * }
	 */
	/********************** Reporting Functions ****************/

	/*
	 * public void takeScreenShot() { Date d = new Date(); String fileName =
	 * d.toString().replace(":", "_").replace(" ", "_") + ".png"; File
	 * srcFileName = ((TakesScreenshot) driver) .getScreenshotAs(out) try {
	 * FileUtils.copyFile(srcFileName, new File(System.getProperty("user.dir") +
	 * "\\screenshot\\" + fileName)); } catch (IOException e) {
	 * 
	 * e.printStackTrace(); } }
	 */

	public void reportFailture(String failMessage) {
		test.log(LogStatus.FAIL, "This test Case has failed");
		// takeScreenShot();
		Assert.fail(failMessage);
	}

	public void reportPass(String msg) {
		/*
		 * test.log(LogStatus.PASS,"This Test case has passed");
		 */
	}

	// ************************App functions*******************************
	public void doLogin(String username, String password, ExtentTest test,
			Hashtable<String, String> data) {
		test.log(LogStatus.INFO, "Navigating the test");
		

	}

	public void waitForPageToLoad() {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		String state = (String) js.executeScript("return document.readyState");
		while (!state.equals("complete")) {
			wait(7);
			state = (String) js.executeScript("return document.readyState");
		}
	}

	public void clickAndWait(String locator_clicked, String locator_pres) {
		int count = 5;
		for (int Ccount = 0; Ccount <= count; Ccount++) {
			getElement(locator_clicked).click();
			wait(2);
			if (isElementPresent(locator_pres)) {
				break;
			}
		}
	}

	public void wait(int timeToWaitInSec) {
		try {
			Thread.sleep(timeToWaitInSec * 1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public WebDriver getDriver(String bType) {
		if (bType.equals("chrome")) {
			driver = new ChromeDriver();
		}
		if (bType.equals("firefox")) {
			driver = new FirefoxDriver();
		}
		return driver;

	}

	public int getLeadRowNumber(String leadName) {
		test.log(LogStatus.INFO, "Finding the lead in the Lead List");
		test.log(LogStatus.INFO, "Lead Name which we are Finding is-->"
				+ leadName);
		List<WebElement> leadNames = driver.findElements(By.xpath(prop
				.getProperty("leadsNamesInList_xpath")));
		for (int totalLeads = 0; totalLeads < leadNames.size(); totalLeads++) {
			if (leadNames.get(totalLeads).getText().trim().equals(leadName)) {
				return (totalLeads + 1);
			}
		}
		return -1;
	}

	public WebElement getLeadElement(String Element) {
		test.log(LogStatus.INFO, "Finding the lead and clicking on it");
		test.log(LogStatus.INFO, "Lead record which we are finding is-->"
				+ Element);
		List<WebElement> leadNames = driver.findElements(By.xpath(prop
				.getProperty("leadsNamesInList_xpath")));
		for (int newCount = 0; newCount < leadNames.size(); newCount++) {
			if (leadNames.get(newCount).getText().trim().equals(Element)) {
				WebElement newElement = leadNames.get(newCount);
				return newElement;
			}
		}
		return null;
	}

	public void waitforAlertToDisplayAndAccept() {
		driver.findElement(By.id("deleteButton")).click();

		WebDriverWait wait = new WebDriverWait(driver, 7);
		wait.until(ExpectedConditions.alertIsPresent());
		test.log(LogStatus.INFO, "Waiting for the Alert to display");
		driver.switchTo().alert().accept();
		waitForPageToLoad();
		driver.switchTo().defaultContent();
	}

	public void switchToMainframe() {
		wait(5);
		driver.switchTo().defaultContent();
		wait(1);
		driver.switchTo().frame("MainFrame");

	}

	public void switchTomodal() {
		wait(2);
		driver.switchTo().defaultContent();
		wait(1);
		List<WebElement> modal = driver.findElements(By.id("ebRealModalFrame"));
		driver.switchTo().frame(modal.size());
	}
	
	public void switchToNexttab() throws InterruptedException{
		Thread.sleep(3000);
		ArrayList<String> tabs2 = new ArrayList<String> (driver.getWindowHandles());
	    driver.switchTo().window(tabs2.get(1));
	    /*driver.close();
	    driver.switchTo().window(tabs2.get(0));*/
	}
	
	public void selectValues(String nameOfState){
		
		Select sel =new Select(driver.findElement(By.cssSelector("select[name='state']")));
		sel.selectByVisibleText(nameOfState);
	}
	
	public void logout(){
		if(objectrepository.flipKartImage.isDisplayed()){
			objectrepository.flipKartImage.click();
		}
		for(WebElement myAcc:objectrepository.myAccount){
			if(myAcc.getText().equalsIgnoreCase("my account")){
				myAcc.click();
				break;
				
			}
		}
			for(WebElement logot:objectrepository.logout){
				if(logot.getText().equalsIgnoreCase("logout")){
					logot.click();
					break;
				}
			}
		}
		
		
	}


